/*
Gradle script for building the library. Usage:
Have a local or a remote Maven repository which hosts the dependencies (only Starling 1.7.0 in this case)

(optional) Have a file called gradle.properties in the [Users]/[UserName]/.gradle directory with the following contents:

mavenUsername=[the username to access your Maven repo]
mavenPassword=[password for your Maven repo]
repoManagerURL=[URL of your Maven repo]
flashPlayerLocation=C:\\[path to flash player]\\flashplayer.exe

(flashPlayerLocation is only needed if you want to run tests)

(OSX only) make the gradlew file in the root directory executable

Run gradlew build          to build the .swc and run tests
Run gradlew idea           to generate an IntelliJ IDEA module
Run gradlew assemble       to just build the .swc
Run gradlew uploadArchives to upload the artifact to a local or remote Maven repo
Run gradlew tasks          to list all other tasks, e.g. to make project files for Flash Builder or IntelliJ IDEA
*/
import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    ext {
        if (!project.hasProperty('repoManagerURL') ||
            !project.hasProperty('mavenUsername') ||
            !project.hasProperty('mavenPassword')) {
            println("NOTE: custom Maven repository is not configured in gradle.properties")
            repoManagerURL = "https://repo1.maven.org/maven2"
            mavenUsername = ""
            mavenPassword = ""
        }
    }
    repositories {
        mavenLocal()
		mavenCentral()
        maven {
            url repoManagerURL + 'repo'
            credentials {
                username = mavenUsername
                password = mavenPassword
            }
        }
    }

    dependencies {
        classpath group: 'org.gradlefx', name: 'gradlefx', version: '1.5.0'
    }
}

apply plugin: 'gradlefx'
apply plugin: 'ideafx'
apply plugin: 'maven'

group = 'com.funkypandagame'
version = '3.28'
type = 'swc'
output = 'stardust-library'
playerVersion = '20.0'
srcDirs	= ['src/main/flex']

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://raw.githubusercontent.com/tconkling/maven-repo/master/"
    }
    maven {
        url repoManagerURL + 'repo'
        credentials {
            username = mavenUsername
            password = mavenPassword
        }
    }
    ivy {
        name 'Adobe Air SDK'
        artifactPattern  Os.isFamily(Os.FAMILY_WINDOWS) ?
                'http://airdownload.adobe.com/air/win/download/[revision]/[module]_Compiler.[ext]' :
                'http://airdownload.adobe.com/air/mac/download/[revision]/[module]_Compiler.[ext]'
    }
}

dependencies {
    airSDK group: 'com.adobe', name: 'AIRSDK', version: '20.0', ext: Os.isFamily(Os.FAMILY_WINDOWS) ? 'zip' : 'tbz2'

    external 'com.gamua:starling-framework:2.0.1'
}

additionalCompilerOptions = [
        '-inline',
        // AS3 metadata
        '-keep-as3-metadata+=Inline,Embed,SWF,Transient'
]

sdkAutoInstall {
    showPrompts = false
}

///////////////////////////////////////// Wrapper
task wrapper(type: Wrapper) {
    group = 'Buildmaster'
    description = 'Generates gradlew and gradlew.bat bootstrap scripts.'
    gradleVersion = '4.0'
    // place jar file and properties into a subdirectory to avoid root dir clutter
    jarFile = 'gradle/wrapper/gradle.jar'
}

///////////////////////////////////////// Maven
// this is a workaround, see https://github.com/GradleFx/GradleFx/issues/91
uploadArchives {
    description 'Deploys the existing .swc to the local or remote Maven repository. Also creates the pom.xml file.'
    repositories {
        mavenDeployer {
            // invoke this with the -PdeployToRepoManager command line argument
            if (project.hasProperty('deployToRepoManager')) {
                repository(url: repoManagerURL + 'funkypanda') {
                    authentication(userName: mavenUsername, password: mavenPassword)
                }
            }
            else {
                repository url: mavenLocal().url
            }
            //The publication doesn't know about our dependencies, so we have to manually add them to the pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                project.configurations["external"].allDependencies.each { Dependency dependency ->
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', dependency.group)
                    dependencyNode.appendNode('artifactId', dependency.name)
                    dependencyNode.appendNode('version', dependency.version)
                    dependencyNode.appendNode('type', 'swc')

                }
            }
        }
    }
}
